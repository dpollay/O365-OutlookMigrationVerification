#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 081bcd46-4c0e-4539-a56a-cd96dc34d9d3
# Source File: MigrationVerification.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
Zy8AAB+LCAAAAAAABADtWl1P4zgUfV9p/0PUp91R1TZJ0w+pVIICu2iHYURZZt6Qk7jFixtXjgN0
NT9+r5O0UJoPJ4VMKq2QSpLaPr73nOt77WZ0jR32iPnqFAmkwYVPmHfUMBrjX3/RtNEVJ3PiIXpO
KP6CFnh8SeYcCWhzizmZESe8bi392ai90zYawf4HO0ITqyU+akxXvsCL1jfiuezJb50zvog+m1rS
V03tNp5Qt9WRf01tElARcHzk4UBwRJva18CmxPkLr27YA/aO7H4fWY7V04dmF3cGw4bmwVSOGjMY
T29ozj2hLod2jQnzBGfUjwyFiX7lbIm5WMUdJpRgT0zJv7gxNo1eU7OMzqi9bpTSSZrdGIdYuW1v
8LNojKWdu03PHgE7bveZITce805ej9rht+um+f49CYRg3od72A5hbrAvsty864fPLBJRY6ybTc0Y
7no5zc8viApdIib7FkCYCs1vkH3hufgZyFdpHXKpOJO/fXxL/ADRqVhRfIKchwmjjEN/HuCk/q/V
ALJ0Hl6bfhc+eSOKdqSKmmrkOvBKS0QflNEIIH6kRAxliahNZC+FXLLAx1syAdC7l6f7SuWaOPfS
mBP2/OF6YYFYBiIavbRkjKZm6kNlxbzGVOh0jZF75dFVOjmJKjOGw6amD1Sm9aKz3aSSprPNtzup
pTDff3AWLKsgey6BbPacmabz8oeuErkR0Ru8YqQZfSUaNqSprFXQeirYEsoBRH0VEUUsT7EQxJv7
SR1qSGwvm9gsansyWHoJduaRq9YnpncAAur2lXpk1wclGE7jOGTpifhYu/B8Mr8XSWzXL8efcBgb
G3mMZ3FudGEWejId2ek+BlfsGdf4nZS0X3xJTiez1Wopti9aAoRjpBaKsUOSasWw43ZSUNRTVUXA
/Gmt/OJqOg4Em7DFkmKBL5kLPE+D+RzK5uPlEnuuIhmvR5mygDswjtzlRoYrDrK9mCUl/nRZv7ig
kKYNQ1bLSQkoW9TJPXZUsvughknHKp90dAvw+1aJrKPWJyJJN6Go6Cbroei6825ZB7YM4X3ZXFPV
2sADT17sk2Z6BUIkYjkGLRSKutEpFYopPB9kKHb3q//MlGUpMxK7Res/Sw0le/P/jpF4FW5HtVPC
gU7GVwdU/Z0z6mK+fwk4KF0CRjOoog5M1lk968DIK4dZDEanMxAN9awF12FKsGqltk8i2jijkqow
ZaN7kKnI3CsVlaoJ1c4J1jXhoH41ofyF0EY+1mAEWroyhNixWRVUCznLL6WKQzkVFB6tnXlyFDd7
uX3T+wKsegMAjeTTbb9MBQeEprbwHcYpsd/D9rEvkAhg7ZFwP3UKRg3mYNZgDt0azMFKmEMFpxab
CCy4U9IhPSmfq+XV4QeZnnLPTcvQlJ2e1LYx+2yUlNuXS08XntwnyVLsgLZIP/N8/P/j8W1/HOaG
iEjZS9XXc0NUQZrZeKDGZ+Nbt9s3+VK6AjakfacEUTb/+C02wM0Azg3h9LQX5E7xDAHCmQxc8bz7
4tNOUU2owDJCITDCZVr7rQX9fv/xSf77cUxp+NSH+0+5g03v2dOfmC4TA76of6PzkGgR4BU5eRZi
2hHm2tNa+yAkYRy6JI59Hy/AcOyvx4qfrMaxIy+Rh+Z4AYmgJde3Rbg4vTjUVHWoqdszc2D1kGv2
utiEQnyD9Bb5Hev+DJTIviow3l2M+YjyhKIaII6ews1acayOObNm/Zmuu1YHmSgf6/uCVmPT+heG
KeaPxMGlKCts3YRxXIl5sVWwKoBpH2Db5jZaVUbt1y/Wj/8DbTT3l2cvAAA=#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.58
     Generated on:       6/26/2014 2:13 PM
     Generated by:       dpollay
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2014
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-MigrationVerification_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$buttonTest = New-Object 'System.Windows.Forms.Button'
	$buttonRun = New-Object 'System.Windows.Forms.Button'
	$outputWindow = New-Object 'System.Windows.Forms.RichTextBox'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonBrowse2 = New-Object 'System.Windows.Forms.Button'
	$gwInsights = New-Object 'System.Windows.Forms.TextBox'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$runname = New-Object 'System.Windows.Forms.TextBox'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonBrowseFolder = New-Object 'System.Windows.Forms.Button'
	$outputDir = New-Object 'System.Windows.Forms.TextBox'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$tableName = New-Object 'System.Windows.Forms.ComboBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonBrowse = New-Object 'System.Windows.Forms.Button'
	$inputFile = New-Object 'System.Windows.Forms.TextBox'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$openfiledialog2 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	
	
	
	#region Mysql Functions
	## MYSQL Connection
	## This requires mysql connector net
	## All variables will need changing to suit your environment
	$server = "server"
	$username = "username"
	$password = "password"
	$database = "OutlookStatus"
	
	## The path will need to match the mysql connector you downloaded
	[void][system.reflection.Assembly]::LoadFrom("C:\Program Files (x86)\MySQL\MySQL Connector Net 6.8.3\Assemblies\v4.5\MySQL.Data.dll")
	
	function global:Set-SqlConnection ($server = $(Read-Host "SQL Server Name"), $username = $(Read-Host "Username"), $password = $(Read-Host "Password"), $database = $(Read-Host "Default Database"))
	{
		$SqlConnection.ConnectionString = "server=$server;user id=$username;password=$password;database=$database;pooling=false;Allow Zero Datetime=True;"
	}
	
	function global:Get-SqlDataTable($Query = $(if (-not ($Query -gt $null)) { Read-Host "Query to run" }))
	{
		if (-not ($SqlConnection.State -like "Open")) { $SqlConnection.Open() }
		$SqlCmd = New-Object MySql.Data.MySqlClient.MySqlCommand $Query, $SqlConnection
		$SqlAdapter = New-Object MySql.Data.MySqlClient.MySqlDataAdapter
		$SqlAdapter.SelectCommand = $SqlCmd
		$DataSet = New-Object System.Data.DataSet
		$SqlAdapter.Fill($DataSet) | Out-Null
		$SqlConnection.Close()
		return $DataSet.Tables[0]
	}
	
	Set-Variable SqlConnection (New-Object MySql.Data.MySqlClient.MySqlConnection) -Scope Global -Option AllScope -Description "Personal variable for Sql Query functions"
	Set-SqlConnection $server $username $password $database
	
	Function Connect-O365
	{
		$Creds = Get-credential
		$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $Creds -Authentication Basic -AllowRedirection
		Import-PSSession $Session
		#Import-Module Msonline
		#Connect-MSOLService -credential $creds
	}
	#endregion
	
	function mysqlTable{
		$outputWindow.Text = "Creating MySql Table..."
		$truncate = 'truncate table ' + $tableName.Text + ''
		global:Get-SqlDataTable $truncate
		
		foreach ($user in $users){
			$global:createTable = 'insert into ' + $tableName.Text + '(Identity) values("' + $user + '")'
			global:Get-SqlDataTable $global:createTable
		}
	}
	
	function processUsers{
		$outputWindow.Text += "`r`nProcessing Users..."
		foreach ($user in $users){
			$getms = get-mailboxstatistics $user
			$getm = get-mailbox $user
			$getp = Get-MailboxPermission $user | where { ($_.IsInherited -eq $false) -and -not ($_.User -like "NT Authority\SELF") -and ($_.User -like "*-FC") }
			$getrecip = get-recipient $user
			$global:insertStats = 'update ' + $tableName.Text + ' set DisplayName = "' + $getms.DisplayName + '", ItemCount = ' + $getms.ItemCount + ', TotalItemSize = "' + $getms.TotalItemSize + '" where Identity = "' + $user + '"'
			$global:insertMailbox = 'update ' + $tableName.Text + ' set ForwardingAddress = "' + $getm.ForwardingAddress + '", ForwardingSmtpAddress = "' + $getm.ForwardingSmtpAddress + '", DeliverToMailboxAndForward = "' + $getm.DeliverToMailboxAndForward + '", PrimarySmtpAddress = "' + $getm.PrimarySmtpAddress + '", EmailAddresses = "' + $getm.EmailAddresses + '", GrantSendOnBehalfTo = "' + $getm.GrantSendOnBehalfTo + '" where Identity = "' + $user + '"'
			$global:insertPerms = 'update ' + $tableName.Text + ' set FullControlUser = "' + $getp.User + '" where Identity = "' + $user + '"'
			$global:insertRecip = 'update ' + $tableName.Text + ' set MailboxType = "' + $getrecip.RecipientTypeDetails + '" where Identity = "' + $user + '"'
			Get-SqlDataTable $global:insertStats
			Get-SqlDataTable $global:insertMailbox
			Get-SqlDataTable $global:insertPerms
			Get-SqlDataTable $global:insertRecip
		}
	}
	
	function processGroupwise{
		$outputWindow.Text += "`r`nImporting Groupwise stats..."
		foreach ($user in $users){
			$gwimport = import-csv $gwInsights.Text | where-object { $_.Mailbox -eq "$user" }
			$global:insertGw = 'update ' + $tableName.Text + ' set GwInbox = replace("' + $gwimport.Inbox + '",",",""), GwOutbox = replace("' + $gwimport.Outbox + '",",",""), GwTrash = replace("' + $gwimport.Trash + '",",","") where Identity = "' + $user + '"'
			get-sqldatatable $global:insertGw
		}
	}
	
	function exportCsv{
		$outputWindow.Text += "`r`nParsing results to CSV..."
		$formattedDate = get-date -UFormat "%d-%m"
		$remigrate = 'select Identity, ItemCount, GwInbox from ' + $tableName.Text + ' where Itemcount < 10 OR ItemCount is null OR (ItemCount < GwInbox AND GwInbox > 0)'
		$acl = 'select Identity, GrantSendOnBehalfTo, FullControlUser from ' + $tableName.Text + ' where GrantSendOnBehalfTo = "" OR FullControlUser = ""'
		$forwarding = 'select Identity, ForwardingSmtpAddress from ' + $tableName.Text + ' where ForwardingSmtpAddress = ""'
		$primarysmtp = 'select Identity, PrimarySmtpAddress from ' + $tableName.Text + ' where PrimarySmtpAddress not like "%nycourts.gov"'
		$completeOutput = 'select * from ' + $tableName.Text + ''
		
		Get-SqlDataTable $remigrate | export-csv ($outputDir.Text + '\' + $runname.Text + '-remigrate-' + $formattedDate + '.csv')
		Get-SqlDataTable $acl | export-csv ($outputDir.Text + '\' + $runname.Text + '-ACL-' + $formattedDate + '.csv')
		Get-SqlDataTable $forwarding | export-csv ($outputDir.Text + '\' + $runname.Text + '-Forwarding-' + $formattedDate + '.csv')
		Get-SqlDataTable $primarysmtp | export-csv ($outputDir.Text + '\' + $runname.Text + '-PrimarySmtp-' + $formattedDate + '.csv')
		Get-SqlDataTable $completeOutput | export-csv ($outputDir.Text + '\' + $runname.Text + '-Complete-' + $formattedDate + '.csv')
	}
	
	$form1_Load={
		#TODO: Initialize Form Controls here
		import-pssession $(new-pssession -configurationname microsoft.exchange -ConnectionUri https://ps.outlook.com/powershell -Authentication Basic -AllowRedirection -Credential $(get-credential))
	}
	
	$buttonBrowse_Click={
	
		if($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$inputFile.Text = $openfiledialog1.FileName
		}
	}
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$buttonBrowseFolder_Click={
		if($folderbrowserdialog1.ShowDialog() -eq 'OK')
		{
			$outputDir.Text = $folderbrowserdialog1.SelectedPath
		}
	}
	
	$buttonRun_MouseClick=[System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
		#TODO: Place custom script here
		$users = Get-Content $inputFile.Text
		mysqlTable
		$outputWindow.Text += "`r`nMySql Table Created"
		processUsers
		$outputWindow.Text += "`r`nUsers Processed"
		processGroupwise
		$outputWindow.Text += "`r`nGroupwise Insights Processed"
		exportCsv
		$outputWindow.Text += "`r`nCSVs Created"
		$outputWindow.Text += "`r`nComplete"
	}
	
	$buttonBrowse2_Click={
	
		if($openfiledialog2.ShowDialog() -eq 'OK')
		{
			$gwInsights.Text = $openfiledialog2.FileName
		}
	}
	
	$buttonTest_Click={
		#TODO: Place custom script here
		exportCsv
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonTest.remove_Click($buttonTest_Click)
			$buttonRun.remove_MouseClick($buttonRun_MouseClick)
			$buttonBrowse2.remove_Click($buttonBrowse2_Click)
			$buttonBrowseFolder.remove_Click($buttonBrowseFolder_Click)
			$buttonBrowse.remove_Click($buttonBrowse_Click)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	$groupbox1.SuspendLayout()
	$groupbox6.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox4.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($buttonTest)
	$form1.Controls.Add($buttonRun)
	$form1.Controls.Add($outputWindow)
	$form1.Controls.Add($groupbox1)
	$form1.ClientSize = '326, 520'
	$form1.Name = "form1"
	$form1.Text = "Form"
	$form1.add_Load($form1_Load)
	#
	# buttonTest
	#
	$buttonTest.Location = '13, 290'
	$buttonTest.Name = "buttonTest"
	$buttonTest.Size = '75, 23'
	$buttonTest.TabIndex = 3
	$buttonTest.Text = "Test"
	$buttonTest.UseVisualStyleBackColor = $True
	$buttonTest.add_Click($buttonTest_Click)
	#
	# buttonRun
	#
	$buttonRun.Location = '118, 290'
	$buttonRun.Name = "buttonRun"
	$buttonRun.Size = '75, 23'
	$buttonRun.TabIndex = 2
	$buttonRun.Text = "Run"
	$buttonRun.UseVisualStyleBackColor = $True
	$buttonRun.add_MouseClick($buttonRun_MouseClick)
	#
	# outputWindow
	#
	$outputWindow.Location = '12, 319'
	$outputWindow.Name = "outputWindow"
	$outputWindow.ReadOnly = $True
	$outputWindow.Size = '299, 189'
	$outputWindow.TabIndex = 1
	$outputWindow.Text = ""
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($groupbox6)
	$groupbox1.Controls.Add($groupbox5)
	$groupbox1.Controls.Add($groupbox4)
	$groupbox1.Controls.Add($groupbox3)
	$groupbox1.Controls.Add($groupbox2)
	$groupbox1.Location = '13, 13'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '299, 271'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = "Settings"
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($buttonBrowse2)
	$groupbox6.Controls.Add($gwInsights)
	$groupbox6.Location = '6, 186'
	$groupbox6.Name = "groupbox6"
	$groupbox6.Size = '283, 47'
	$groupbox6.TabIndex = 3
	$groupbox6.TabStop = $False
	$groupbox6.Text = "Groupwise Insights"
	#
	# buttonBrowse2
	#
	$buttonBrowse2.Location = '240, 17'
	$buttonBrowse2.Name = "buttonBrowse2"
	$buttonBrowse2.Size = '30, 23'
	$buttonBrowse2.TabIndex = 1
	$buttonBrowse2.Text = "..."
	$buttonBrowse2.UseVisualStyleBackColor = $True
	$buttonBrowse2.add_Click($buttonBrowse2_Click)
	#
	# gwInsights
	#
	$gwInsights.AutoCompleteMode = 'SuggestAppend'
	$gwInsights.AutoCompleteSource = 'FileSystem'
	$gwInsights.Location = '6, 19'
	$gwInsights.Name = "gwInsights"
	$gwInsights.Size = '228, 20'
	$gwInsights.TabIndex = 0
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($runname)
	$groupbox5.Location = '150, 75'
	$groupbox5.Name = "groupbox5"
	$groupbox5.Size = '139, 49'
	$groupbox5.TabIndex = 1
	$groupbox5.TabStop = $False
	$groupbox5.Text = "Run name"
	#
	# runname
	#
	$runname.Location = '6, 20'
	$runname.Name = "runname"
	$runname.Size = '120, 20'
	$runname.TabIndex = 1
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($buttonBrowseFolder)
	$groupbox4.Controls.Add($outputDir)
	$groupbox4.Location = '6, 130'
	$groupbox4.Name = "groupbox4"
	$groupbox4.Size = '283, 50'
	$groupbox4.TabIndex = 2
	$groupbox4.TabStop = $False
	$groupbox4.Text = "Output Directory"
	#
	# buttonBrowseFolder
	#
	$buttonBrowseFolder.Location = '240, 18'
	$buttonBrowseFolder.Name = "buttonBrowseFolder"
	$buttonBrowseFolder.Size = '30, 23'
	$buttonBrowseFolder.TabIndex = 4
	$buttonBrowseFolder.Text = "..."
	$buttonBrowseFolder.UseVisualStyleBackColor = $True
	$buttonBrowseFolder.add_Click($buttonBrowseFolder_Click)
	#
	# outputDir
	#
	$outputDir.AutoCompleteMode = 'SuggestAppend'
	$outputDir.AutoCompleteSource = 'FileSystemDirectories'
	$outputDir.Location = '6, 20'
	$outputDir.Name = "outputDir"
	$outputDir.Size = '228, 20'
	$outputDir.TabIndex = 3
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($tableName)
	$groupbox3.Location = '6, 75'
	$groupbox3.Name = "groupbox3"
	$groupbox3.Size = '138, 49'
	$groupbox3.TabIndex = 1
	$groupbox3.TabStop = $False
	$groupbox3.Text = "Database Table"
	#
	# tableName
	#
	$tableName.FormattingEnabled = $True
	[void]$tableName.Items.Add("status")
	[void]$tableName.Items.Add("status2")
	[void]$tableName.Items.Add("status3")
	[void]$tableName.Items.Add("status4")
	[void]$tableName.Items.Add("status5")
	$tableName.Location = '6, 19'
	$tableName.Name = "tableName"
	$tableName.Size = '121, 21'
	$tableName.TabIndex = 2
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonBrowse)
	$groupbox2.Controls.Add($inputFile)
	$groupbox2.Location = '6, 19'
	$groupbox2.Name = "groupbox2"
	$groupbox2.Size = '283, 50'
	$groupbox2.TabIndex = 0
	$groupbox2.TabStop = $False
	$groupbox2.Text = "Input File"
	#
	# buttonBrowse
	#
	$buttonBrowse.Location = '240, 17'
	$buttonBrowse.Name = "buttonBrowse"
	$buttonBrowse.Size = '30, 23'
	$buttonBrowse.TabIndex = 1
	$buttonBrowse.Text = "..."
	$buttonBrowse.UseVisualStyleBackColor = $True
	$buttonBrowse.add_Click($buttonBrowse_Click)
	#
	# inputFile
	#
	$inputFile.AutoCompleteMode = 'SuggestAppend'
	$inputFile.AutoCompleteSource = 'FileSystem'
	$inputFile.Location = '6, 19'
	$inputFile.Name = "inputFile"
	$inputFile.Size = '228, 20'
	$inputFile.TabIndex = 0
	#
	# openfiledialog1
	#
	$openfiledialog1.DefaultExt = "txt"
	$openfiledialog1.Filter = "Text File (.txt)|*.txt|All Files|*.*"
	$openfiledialog1.ShowHelp = $True
	#
	# folderbrowserdialog1
	#
	#
	# openfiledialog2
	#
	$openfiledialog2.DefaultExt = "txt"
	$openfiledialog2.Filter = "Text File (.txt)|*.txt|All Files|*.*"
	$openfiledialog2.ShowHelp = $True
	$groupbox2.ResumeLayout($false)
	$groupbox3.ResumeLayout($false)
	$groupbox4.ResumeLayout($false)
	$groupbox5.ResumeLayout($false)
	$groupbox6.ResumeLayout($false)
	$groupbox1.ResumeLayout($false)
	$form1.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $form1.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-MigrationVerification_psf | Out-Null
	#Perform cleanup
	OnApplicationExit
}
